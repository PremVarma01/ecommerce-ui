// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id     String @id @default(uuid())
  name   String
  userId String

  Billboard Billboard[] @relation("StoreToBillboard")

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  categories Category[] @relation("StoreToCategory")
  sizes      Size[]     @relation("StoreToSize")
  colors     Color[]    @relation("StoreToColor")
  products   Product[]  @relation("StoreToProduct")
  orders     Order[]    @relation("StoreToOrder")
}

model Billboard {
  id         String  @id @default(uuid())
  label      String
  imageUrl   String
  isFeatured Boolean @default(false)

  storeId  String
  store    Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  Category Category[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Category {
  id   String @id @default(uuid())
  name String

  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  Product     Product[] @relation("CategoryToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id    String @id @default(uuid())
  name  String
  value String

  storeId String
  store   Store     @relation("StoreToSize", fields: [storeId], references: [id])
  product Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Color {
  id    String @id @default(uuid())
  name  String
  value String

  storeId String
  store   Store     @relation("StoreToColor", fields: [storeId], references: [id])
  product Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

enum ProductType {
  NEW
  OUT_OF_STOCK
  REGULAR
  LIMITED_EDITION
  OFFER
}

model Product {
  id          String      @id @default(uuid())
  name        String
  price       Decimal
  productType ProductType @default(REGULAR)
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)

  storeId String
  store   Store  @relation("StoreToProduct", fields: [storeId], references: [id])

  categoryId String
  category   Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  sizes      Size[]
  colors     Color[]
  images     Image[]
  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
}

model Image {
  id  String @id @default(uuid())
  url String

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id      String  @id @default(uuid())
  isPaid  Boolean @default(false)
  phone   String  @default("")
  address String  @default("")

  storeId    String
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model OrderItem {
  id String @id @default(uuid())

  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}
